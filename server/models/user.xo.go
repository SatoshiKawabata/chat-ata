package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// User represents a row from 'users'.
type User struct {
	ID                int            `json:"id"`                  // id
	Username          string         `json:"username"`            // username
	Password          string         `json:"password"`            // password
	DisplayName       sql.NullString `json:"display_name"`        // display_name
	OriginalGptSystem sql.NullString `json:"original_gpt_system"` // original_gpt_system
	IsAi              bool           `json:"is_ai"`               // is_ai
	CreatedAt         *Time          `json:"created_at"`          // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [User] exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted returns true when the [User] has been marked for deletion
// from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the [User] to the database.
func (u *User) Insert(ctx context.Context, db DB) error {
	switch {
	case u._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case u._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO users (` +
		`username, password, display_name, original_gpt_system, is_ai, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, u.Username, u.Password, u.DisplayName, u.OriginalGptSystem, u.IsAi, u.CreatedAt)
	res, err := db.ExecContext(ctx, sqlstr, u.Username, u.Password, u.DisplayName, u.OriginalGptSystem, u.IsAi, u.CreatedAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	u.ID = int(id)
	// set exists
	u._exists = true
	return nil
}

// Update updates a [User] in the database.
func (u *User) Update(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case u._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE users SET ` +
		`username = $1, password = $2, display_name = $3, original_gpt_system = $4, is_ai = $5, created_at = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, u.Username, u.Password, u.DisplayName, u.OriginalGptSystem, u.IsAi, u.CreatedAt, u.ID)
	if _, err := db.ExecContext(ctx, sqlstr, u.Username, u.Password, u.DisplayName, u.OriginalGptSystem, u.IsAi, u.CreatedAt, u.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [User] to the database.
func (u *User) Save(ctx context.Context, db DB) error {
	if u.Exists() {
		return u.Update(ctx, db)
	}
	return u.Insert(ctx, db)
}

// Upsert performs an upsert for [User].
func (u *User) Upsert(ctx context.Context, db DB) error {
	switch {
	case u._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO users (` +
		`id, username, password, display_name, original_gpt_system, is_ai, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`username = EXCLUDED.username, password = EXCLUDED.password, display_name = EXCLUDED.display_name, original_gpt_system = EXCLUDED.original_gpt_system, is_ai = EXCLUDED.is_ai, created_at = EXCLUDED.created_at `
	// run
	logf(sqlstr, u.ID, u.Username, u.Password, u.DisplayName, u.OriginalGptSystem, u.IsAi, u.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, u.ID, u.Username, u.Password, u.DisplayName, u.OriginalGptSystem, u.IsAi, u.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Delete deletes the [User] from the database.
func (u *User) Delete(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return nil
	case u._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM users ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, u.ID)
	if _, err := db.ExecContext(ctx, sqlstr, u.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	u._deleted = true
	return nil
}

// UserByID retrieves a row from 'users' as a [User].
//
// Generated from index 'users_id_pkey'.
func UserByID(ctx context.Context, db DB, id int) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, password, display_name, original_gpt_system, is_ai, created_at ` +
		`FROM users ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&u.ID, &u.Username, &u.Password, &u.DisplayName, &u.OriginalGptSystem, &u.IsAi, &u.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}
