// Package models contains generated code for schema 'chat_system.db'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// ChatRoom represents a row from 'chat_rooms'.
type ChatRoom struct {
	ID        int    `json:"id"`         // id
	Name      string `json:"name"`       // name
	CreatedAt *Time  `json:"created_at"` // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ChatRoom] exists in the database.
func (cr *ChatRoom) Exists() bool {
	return cr._exists
}

// Deleted returns true when the [ChatRoom] has been marked for deletion
// from the database.
func (cr *ChatRoom) Deleted() bool {
	return cr._deleted
}

// Insert inserts the [ChatRoom] to the database.
func (cr *ChatRoom) Insert(ctx context.Context, db DB) error {
	switch {
	case cr._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case cr._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO chat_rooms (` +
		`name, created_at` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, cr.Name, cr.CreatedAt)
	res, err := db.ExecContext(ctx, sqlstr, cr.Name, cr.CreatedAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	cr.ID = int(id)
	// set exists
	cr._exists = true
	return nil
}

// Update updates a [ChatRoom] in the database.
func (cr *ChatRoom) Update(ctx context.Context, db DB) error {
	switch {
	case !cr._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case cr._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE chat_rooms SET ` +
		`name = $1, created_at = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, cr.Name, cr.CreatedAt, cr.ID)
	if _, err := db.ExecContext(ctx, sqlstr, cr.Name, cr.CreatedAt, cr.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [ChatRoom] to the database.
func (cr *ChatRoom) Save(ctx context.Context, db DB) error {
	if cr.Exists() {
		return cr.Update(ctx, db)
	}
	return cr.Insert(ctx, db)
}

// Upsert performs an upsert for [ChatRoom].
func (cr *ChatRoom) Upsert(ctx context.Context, db DB) error {
	switch {
	case cr._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO chat_rooms (` +
		`id, name, created_at` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, created_at = EXCLUDED.created_at `
	// run
	logf(sqlstr, cr.ID, cr.Name, cr.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, cr.ID, cr.Name, cr.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	cr._exists = true
	return nil
}

// Delete deletes the [ChatRoom] from the database.
func (cr *ChatRoom) Delete(ctx context.Context, db DB) error {
	switch {
	case !cr._exists: // doesn't exist
		return nil
	case cr._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM chat_rooms ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, cr.ID)
	if _, err := db.ExecContext(ctx, sqlstr, cr.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	cr._deleted = true
	return nil
}

// ChatRoomByID retrieves a row from 'chat_rooms' as a [ChatRoom].
//
// Generated from index 'chat_rooms_id_pkey'.
func ChatRoomByID(ctx context.Context, db DB, id int) (*ChatRoom, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, created_at ` +
		`FROM chat_rooms ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	cr := ChatRoom{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&cr.ID, &cr.Name, &cr.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &cr, nil
}
