package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// ChatRoomMember represents a row from 'chat_room_members'.
type ChatRoomMember struct {
	RoomID    sql.NullInt64  `json:"room_id"`    // room_id
	UserID    sql.NullInt64  `json:"user_id"`    // user_id
	GptSystem sql.NullString `json:"gpt_system"` // gpt_system
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ChatRoomMember] exists in the database.
func (crm *ChatRoomMember) Exists() bool {
	return crm._exists
}

// Deleted returns true when the [ChatRoomMember] has been marked for deletion
// from the database.
func (crm *ChatRoomMember) Deleted() bool {
	return crm._deleted
}

// Insert inserts the [ChatRoomMember] to the database.
func (crm *ChatRoomMember) Insert(ctx context.Context, db DB) error {
	switch {
	case crm._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case crm._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO chat_room_members (` +
		`room_id, user_id, gpt_system` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`
	// run
	logf(sqlstr, crm.RoomID, crm.UserID, crm.GptSystem)
	if _, err := db.ExecContext(ctx, sqlstr, crm.RoomID, crm.UserID, crm.GptSystem); err != nil {
		return logerror(err)
	}
	// set exists
	crm._exists = true
	return nil
}

// Update updates a [ChatRoomMember] in the database.
func (crm *ChatRoomMember) Update(ctx context.Context, db DB) error {
	switch {
	case !crm._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case crm._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE chat_room_members SET ` +
		`gpt_system = $1 ` +
		`WHERE room_id = $2 AND user_id = $3`
	// run
	logf(sqlstr, crm.GptSystem, crm.RoomID, crm.UserID)
	if _, err := db.ExecContext(ctx, sqlstr, crm.GptSystem, crm.RoomID, crm.UserID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [ChatRoomMember] to the database.
func (crm *ChatRoomMember) Save(ctx context.Context, db DB) error {
	if crm.Exists() {
		return crm.Update(ctx, db)
	}
	return crm.Insert(ctx, db)
}

// Upsert performs an upsert for [ChatRoomMember].
func (crm *ChatRoomMember) Upsert(ctx context.Context, db DB) error {
	switch {
	case crm._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO chat_room_members (` +
		`room_id, user_id, gpt_system` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (room_id, user_id) DO ` +
		`UPDATE SET ` +
		`gpt_system = EXCLUDED.gpt_system `
	// run
	logf(sqlstr, crm.RoomID, crm.UserID, crm.GptSystem)
	if _, err := db.ExecContext(ctx, sqlstr, crm.RoomID, crm.UserID, crm.GptSystem); err != nil {
		return logerror(err)
	}
	// set exists
	crm._exists = true
	return nil
}

// Delete deletes the [ChatRoomMember] from the database.
func (crm *ChatRoomMember) Delete(ctx context.Context, db DB) error {
	switch {
	case !crm._exists: // doesn't exist
		return nil
	case crm._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM chat_room_members ` +
		`WHERE room_id = $1 AND user_id = $2`
	// run
	logf(sqlstr, crm.RoomID, crm.UserID)
	if _, err := db.ExecContext(ctx, sqlstr, crm.RoomID, crm.UserID); err != nil {
		return logerror(err)
	}
	// set deleted
	crm._deleted = true
	return nil
}

// ChatRoomMemberByRoomIDUserID retrieves a row from 'chat_room_members' as a [ChatRoomMember].
//
// Generated from index 'sqlite_autoindex_chat_room_members_1'.
func ChatRoomMemberByRoomIDUserID(ctx context.Context, db DB, roomID, userID sql.NullInt64) (*ChatRoomMember, error) {
	// query
	const sqlstr = `SELECT ` +
		`room_id, user_id, gpt_system ` +
		`FROM chat_room_members ` +
		`WHERE room_id = $1 AND user_id = $2`
	// run
	logf(sqlstr, roomID, userID)
	crm := ChatRoomMember{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, roomID, userID).Scan(&crm.RoomID, &crm.UserID, &crm.GptSystem); err != nil {
		return nil, logerror(err)
	}
	return &crm, nil
}

// ChatRoom returns the ChatRoom associated with the [ChatRoomMember]'s (RoomID).
//
// Generated from foreign key 'chat_room_members_room_id_fkey'.
func (crm *ChatRoomMember) ChatRoom(ctx context.Context, db DB) (*ChatRoom, error) {
	return ChatRoomByID(ctx, db, int(crm.RoomID.Int64))
}

// User returns the User associated with the [ChatRoomMember]'s (UserID).
//
// Generated from foreign key 'chat_room_members_user_id_fkey'.
func (crm *ChatRoomMember) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, int(crm.UserID.Int64))
}
