package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Message represents a row from 'messages'.
type Message struct {
	ID              int           `json:"id"`                // id
	RoomID          sql.NullInt64 `json:"room_id"`           // room_id
	UserID          sql.NullInt64 `json:"user_id"`           // user_id
	ParentMessageID sql.NullInt64 `json:"parent_message_id"` // parent_message_id
	IsRoot          bool          `json:"is_root"`           // is_root
	Content         string        `json:"content"`           // content
	SentAt          *Time         `json:"sent_at"`           // sent_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Message] exists in the database.
func (m *Message) Exists() bool {
	return m._exists
}

// Deleted returns true when the [Message] has been marked for deletion
// from the database.
func (m *Message) Deleted() bool {
	return m._deleted
}

// Insert inserts the [Message] to the database.
func (m *Message) Insert(ctx context.Context, db DB) error {
	switch {
	case m._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case m._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO messages (` +
		`room_id, user_id, parent_message_id, is_root, content, sent_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, m.RoomID, m.UserID, m.ParentMessageID, m.IsRoot, m.Content, m.SentAt)
	res, err := db.ExecContext(ctx, sqlstr, m.RoomID, m.UserID, m.ParentMessageID, m.IsRoot, m.Content, m.SentAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	m.ID = int(id)
	// set exists
	m._exists = true
	return nil
}

// Update updates a [Message] in the database.
func (m *Message) Update(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case m._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE messages SET ` +
		`room_id = $1, user_id = $2, parent_message_id = $3, is_root = $4, content = $5, sent_at = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, m.RoomID, m.UserID, m.ParentMessageID, m.IsRoot, m.Content, m.SentAt, m.ID)
	if _, err := db.ExecContext(ctx, sqlstr, m.RoomID, m.UserID, m.ParentMessageID, m.IsRoot, m.Content, m.SentAt, m.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Message] to the database.
func (m *Message) Save(ctx context.Context, db DB) error {
	if m.Exists() {
		return m.Update(ctx, db)
	}
	return m.Insert(ctx, db)
}

// Upsert performs an upsert for [Message].
func (m *Message) Upsert(ctx context.Context, db DB) error {
	switch {
	case m._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO messages (` +
		`id, room_id, user_id, parent_message_id, is_root, content, sent_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`room_id = EXCLUDED.room_id, user_id = EXCLUDED.user_id, parent_message_id = EXCLUDED.parent_message_id, is_root = EXCLUDED.is_root, content = EXCLUDED.content, sent_at = EXCLUDED.sent_at `
	// run
	logf(sqlstr, m.ID, m.RoomID, m.UserID, m.ParentMessageID, m.IsRoot, m.Content, m.SentAt)
	if _, err := db.ExecContext(ctx, sqlstr, m.ID, m.RoomID, m.UserID, m.ParentMessageID, m.IsRoot, m.Content, m.SentAt); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Delete deletes the [Message] from the database.
func (m *Message) Delete(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return nil
	case m._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM messages ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, m.ID)
	if _, err := db.ExecContext(ctx, sqlstr, m.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	m._deleted = true
	return nil
}

// MessageByID retrieves a row from 'messages' as a [Message].
//
// Generated from index 'messages_id_pkey'.
func MessageByID(ctx context.Context, db DB, id int) (*Message, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, room_id, user_id, parent_message_id, is_root, content, sent_at ` +
		`FROM messages ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	m := Message{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&m.ID, &m.RoomID, &m.UserID, &m.ParentMessageID, &m.IsRoot, &m.Content, &m.SentAt); err != nil {
		return nil, logerror(err)
	}
	return &m, nil
}

// MessageByParentMessageID retrieves a row from 'messages' as a [Message].
//
// Generated from index 'sqlite_autoindex_messages_1'.
func MessageByParentMessageID(ctx context.Context, db DB, parentMessageID sql.NullInt64) (*Message, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, room_id, user_id, parent_message_id, is_root, content, sent_at ` +
		`FROM messages ` +
		`WHERE parent_message_id = $1`
	// run
	logf(sqlstr, parentMessageID)
	m := Message{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, parentMessageID).Scan(&m.ID, &m.RoomID, &m.UserID, &m.ParentMessageID, &m.IsRoot, &m.Content, &m.SentAt); err != nil {
		return nil, logerror(err)
	}
	return &m, nil
}

// Message returns the Message associated with the [Message]'s (ParentMessageID).
//
// Generated from foreign key 'messages_parent_message_id_fkey'.
func (m *Message) Message(ctx context.Context, db DB) (*Message, error) {
	return MessageByID(ctx, db, int(m.ParentMessageID.Int64))
}

// ChatRoom returns the ChatRoom associated with the [Message]'s (RoomID).
//
// Generated from foreign key 'messages_room_id_fkey'.
func (m *Message) ChatRoom(ctx context.Context, db DB) (*ChatRoom, error) {
	return ChatRoomByID(ctx, db, int(m.RoomID.Int64))
}

// User returns the User associated with the [Message]'s (UserID).
//
// Generated from foreign key 'messages_user_id_fkey'.
func (m *Message) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, int(m.UserID.Int64))
}
